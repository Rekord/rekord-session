{"version":3,"sources":["rekord-session.min.js"],"names":["global","Rekord","undefined","Session","this","status","Status","Active","watching","Map","removing","Collection","validationRequired","SessionWatch","key","object","relations","parent","children","offs","save","Model","Promise","Database","ModelCollection","RelationHasOne","Relations","hasOne","RelationBelongsTo","belongsTo","isObject","uuid","equals","noop","addMethods","replaceMethod","Listeners","RelationUpdate","session","watcher","related","property","relator","relation","isDestroyed","isWatching","lastRelated","unwatch","watch","CollectionAdd","collection","added","CollectionAdds","i","length","CollectionRemove","removed","CollectionRemoves","CollectionReset","destroyChildren","CollectionCleared","prototype","$save","setProperties","setValue","cascade","fakeIt","$session","isActive","$isDeleted","debug","Debugs","SAVE_DELETED","$db","resolve","$set","saveModel","apply","arguments","$remove","ignoreExists","isSaving","$exists","removeModel","Saving","Disabled","Destroyed","hasChanges","checkSavedOnly","searchModels","model","$hasChanges","getChanged","out","target","push","validate","stopAtInvalid","valid","Validation","$validate","setValidationRequired","required","fullValidate","reject","singularity","handleSave","executeSave","each","executeRemove","$isSaved","models","remove","$key","success","afterSave","$status","RemovePending","Synced","put","afterRemove","$push","discard","discardSave","discardRemove","clear","$pop","removeFromModels","$updated","disable","enable","isEnabled","isDisabled","defaultResult","callback","context","callbackContext","watches","values","result","call","destroy","reset","getSessionKey","create","$uid","$sessionKey","getSessionWatch","get","has","setRelations","setSession","setParent","value","watchCollection","$getRelation","addListener","Events","Add","Adds","Reset","Remove","Removes","Cleared","db","trigger","ModelUpdated","$trigger","UpdateAndSave","ModelAdded","updated","CreateAndSave","add","objectSession","eventName","listener","off","$on","on","childKey"],"mappings":"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","file":"rekord-session.min.js","sourcesContent":["/* rekord-session 1.4.0 - Adds mass changes & discards to Rekord by Philip Diffenderfer */\n(function(global, Rekord, undefined)\n{\n  var Map = Rekord.Map;\n  var Model = Rekord.Model;\n  var Promise = Rekord.Promise;\n  var Database = Rekord.Database;\n  var Collection = Rekord.Collection;\n  var ModelCollection = Rekord.ModelCollection;\n  var RelationHasOne = Rekord.Relations.hasOne;\n  var RelationBelongsTo = Rekord.Relations.belongsTo;\n\n  var isObject = Rekord.isObject;\n  var uuid = Rekord.uuid;\n  var equals = Rekord.equals;\n  var noop = Rekord.noop;\n\n  var addMethods = Rekord.addMethods;\n  var replaceMethod = Rekord.replaceMethod;\n\nvar Listeners = {\n\n  RelationUpdate: function(session, watcher, parent, related, property)\n  {\n    return function(relator, relation)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      if ( session.isWatching( relation.lastRelated ) && !session.isWatching( session.related ) )\n      {\n        session.unwatch( relation.lastRelated );\n        session.watch( session.related, watcher.relations[ property ], watcher );\n      }\n    };\n  },\n\n  CollectionAdd: function(session, watcher)\n  {\n    return function (collection, added)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      session.watch( added, watcher.relations, watcher );\n    };\n  },\n\n  CollectionAdds: function(session, watcher)\n  {\n    return function (collection, added)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      for (var i = 0; i < added.length; i++)\n      {\n        session.watch( added[ i ], watcher.relations, watcher );\n      }\n    };\n  },\n\n  CollectionRemove: function(session, watcher)\n  {\n    return function (collection, removed)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      session.unwatch( removed );\n    };\n  },\n\n  CollectionRemoves: function(session, watcher)\n  {\n    return function (collection, removed)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      for (var i = 0; i < removed.length; i++)\n      {\n        session.unwatch( removed[ i ] );\n      }\n    };\n  },\n\n  CollectionReset: function(session, watcher)\n  {\n    return function (collection)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      watcher.destroyChildren();\n\n      for (var i = 0; i < collection.length; i++)\n      {\n        session.watch( collection[ i ], watcher.relations, watcher );\n      }\n    };\n  },\n\n  CollectionCleared: function(session, watcher)\n  {\n    return function (collection)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      watcher.destroyChildren();\n    };\n  }\n\n};\n\n\nreplaceMethod( Model.prototype, '$save', function($save)\n{\n  return function(setProperties, setValue, cascade)\n  {\n    var fakeIt = this.$session && this.$session.isActive();\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( fakeIt )\n    {\n      this.$set( setProperties, setValue );\n\n      this.$session.saveModel( this );\n\n      return Promise.resolve( this );\n    }\n\n    return $save.apply( this, arguments );\n  };\n});\n\nreplaceMethod( Model.prototype, '$remove', function($remove)\n{\n  return function(cascade)\n  {\n    var ignoreExists = this.$session && this.$session.isSaving();\n    var fakeIt = this.$session && this.$session.isActive();\n\n    if ( !this.$exists() && !ignoreExists )\n    {\n      return Promise.resolve( this );\n    }\n\n    if ( fakeIt )\n    {\n      this.$session.removeModel( this );\n\n      return Promise.resolve( this );\n    }\n\n    return $remove.apply( this, arguments );\n  };\n});\n\n\n\n\nfunction Session()\n{\n  this.status = Session.Status.Active;\n  this.watching = new Map();\n  this.removing = new Collection();\n  this.validationRequired = false;\n}\n\nSession.Status =\n{\n  Active: 'active',\n\n  Saving: 'saving',\n\n  Disabled: 'disabled',\n\n  Destroyed: 'destroyed'\n};\n\naddMethods( Session.prototype,\n{\n\n  hasChanges: function(checkSavedOnly)\n  {\n    if (this.removing.length > 0)\n    {\n      return true;\n    }\n\n    return this.searchModels( false, function(model, watcher)\n    {\n      if ( (!checkSavedOnly || watcher.save) && model.$hasChanges() )\n      {\n        return true;\n      }\n    });\n  },\n\n  getChanged: function(checkSavedOnly, out)\n  {\n    var target = out || new Collection();\n\n    target.push.apply( target, this.removing );\n\n    return this.searchModels( target, function(model, watcher)\n    {\n      if ( (!checkSavedOnly || watcher.save) && model.$hasChanges() )\n      {\n        target.push( model );\n      }\n    });\n  },\n\n  validate: function(stopAtInvalid)\n  {\n    var valid = true;\n\n    if ( Rekord.Validation )\n    {\n      this.searchModels( true, function(model, watcher)\n      {\n        if ( model.$validate && !model.$validate() )\n        {\n          valid = false;\n\n          if ( stopAtInvalid )\n          {\n            return false;\n          }\n        }\n      });\n    }\n\n    return valid;\n  },\n\n  setValidationRequired: function(required)\n  {\n    this.validationRequired = required;\n  },\n\n  save: function(fullValidate)\n  {\n    if ( this.status !== Session.Status.Active )\n    {\n      return Promise.reject( this );\n    }\n\n    if ( this.validationRequired && !this.validate( !fullValidate ) )\n    {\n      return Promise.reject( this );\n    }\n\n    return Promise.singularity( Promise.resolve( this ), this, this.handleSave );\n  },\n\n  handleSave: function()\n  {\n    this.status = Session.Status.Saving;\n\n    this.searchModels( true, this.executeSave );\n\n    this.removing.each( this.executeRemove, this );\n\n    this.status = Session.Status.Active;\n  },\n\n  executeSave: function(model, watcher)\n  {\n    if ( watcher.save )\n    {\n      // Remove it so $save processes normally\n      if ( !model.$isSaved() )\n      {\n        model.$db.models.remove( model.$key() );\n      }\n\n      model.$save().success( this.afterSave( watcher, model) );\n    }\n  },\n\n  executeRemove: function(model)\n  {\n    if ( model.$status === Model.Status.RemovePending )\n    {\n      // Add it back so $remove processes normally\n      model.$status = Model.Status.Synced;\n      model.$db.models.put( model.$key(), model );\n\n      model.$remove().success( this.afterRemove( this, model ) );\n    }\n  },\n\n  afterSave: function(watcher, model)\n  {\n    return function onSave()\n    {\n      model.$push();\n      watcher.save = false;\n    };\n  },\n\n  afterRemove: function(session, model)\n  {\n    return function onRemove()\n    {\n      session.removing.remove( model );\n    };\n  },\n\n  discard: function()\n  {\n    this.searchModels( true, this.discardSave );\n\n    this.removing.each( this.discardRemove );\n    this.removing.clear();\n\n    return this;\n  },\n\n  discardSave: function(model, watcher)\n  {\n    if ( watcher.save )\n    {\n      if ( !model.$isSaved() )\n      {\n        model.$db.removeFromModels( model );\n      }\n      else\n      {\n        model.$pop();\n      }\n\n      watcher.save = false;\n    }\n  },\n\n  discardRemove: function(model)\n  {\n    if ( model.$status === Model.Status.RemovePending )\n    {\n      model.$pop();\n      model.$status = Model.Status.Synced;\n      model.$db.models.put( model.$key(), model );\n      model.$updated();\n    }\n  },\n\n  disable: function()\n  {\n    if ( this.status === Session.Status.Active )\n    {\n      this.status = Session.Status.Disabled;\n    }\n  },\n\n  enable: function()\n  {\n    if ( this.status === Session.Status.Disabled )\n    {\n      this.status = Session.Status.Active;\n    }\n  },\n\n  isEnabled: function()\n  {\n    return this.status !== Session.Status.Disabled &&\n           this.status !== Session.Status.Destroyed;\n  },\n\n  isActive: function()\n  {\n    return this.status === Session.Status.Active;\n  },\n\n  isDisabled: function()\n  {\n    return this.status === Session.Status.Disabled;\n  },\n\n  isSaving: function()\n  {\n    return this.status === Session.Status.Saving;\n  },\n\n  isDestroyed: function()\n  {\n    return this.status === Session.Status.Destroyed;\n  },\n\n  searchModels: function(defaultResult, callback, context)\n  {\n    var callbackContext = context || this;\n    var watches = this.watching.values;\n\n    for (var i = 0; i < watches.length; i++)\n    {\n      var watcher = watches[ i ];\n\n      if ( watcher.object instanceof Model )\n      {\n        var result = callback.call( callbackContext, watcher.object, watcher );\n\n        if ( result !== undefined )\n        {\n          return result;\n        }\n      }\n    }\n\n    return defaultResult;\n  },\n\n  destroy: function()\n  {\n    if ( this.status !== Session.Status.Destroyed )\n    {\n      var watches = this.watching.values;\n\n      for (var i = 0; i < watches.length; i++)\n      {\n        var watcher = watches[ i ];\n\n        if ( !watcher.parent )\n        {\n          watcher.destroy( this );\n        }\n      }\n\n      this.watching.reset();\n      this.removing.clear();\n\n      this.status = Session.Status.Destroyed;\n    }\n  },\n\n  getSessionKey: function(object, create)\n  {\n    if ( object instanceof Model )\n    {\n      return object.$uid();\n    }\n    else if ( object instanceof ModelCollection )\n    {\n      if ( !object.$sessionKey && create )\n      {\n        object.$sessionKey = uuid();\n      }\n\n      return object.$sessionKey;\n    }\n    else\n    {\n      throw 'The object provided cannot be watched by session.';\n    }\n  },\n\n  getSessionWatch: function(object, create)\n  {\n    var key = this.getSessionKey( object, create );\n\n    if ( key )\n    {\n      var watch = this.watching.get( key );\n\n      if ( !watch && create )\n      {\n        watch = new SessionWatch( key, object );\n\n        this.watching.put( key, watch );\n      }\n\n      return watch;\n    }\n  },\n\n  isWatching: function(object)\n  {\n    var key = this.getSessionKey( object );\n\n    return key !== false && this.watching.has( key );\n  },\n\n  watch: function(model, relations, parent)\n  {\n    var watcher = this.getSessionWatch( model, true );\n\n    watcher.setRelations( relations );\n    watcher.setSession( this );\n    watcher.setParent( parent );\n\n    model.$push();\n\n    if ( isObject( relations ) )\n    {\n      for (var property in relations)\n      {\n        var value = model[ property ];\n\n        if ( value instanceof Model )\n        {\n          this.watch( value, relations[ property ], watcher );\n        }\n        else if ( value instanceof ModelCollection )\n        {\n          this.watchCollection( value, relations[ property ], watcher );\n        }\n\n        var relation = model.$getRelation( property );\n\n        if ( relation instanceof RelationHasOne || relation instanceof RelationBelongsTo )\n        {\n          watcher.addListener( Model.Events.RelationUpdate, Listeners.RelationUpdate( this, watcher, model, value, property ) );\n        }\n      }\n    }\n\n    return watcher;\n  },\n\n  watchCollection: function(collection, relations, parent)\n  {\n    var watcher = this.getSessionWatch( collection, true );\n\n    watcher.setRelations( relations );\n    watcher.setSession( this );\n    watcher.setParent( parent );\n\n    collection.each(function(model)\n    {\n      this.watch( model, relations, watcher );\n\n    }, this );\n\n    watcher.addListener( Collection.Events.Add, Listeners.CollectionAdd( this, watcher ) );\n    watcher.addListener( Collection.Events.Adds, Listeners.CollectionAdds( this, watcher ) );\n    watcher.addListener( Collection.Events.Reset, Listeners.CollectionReset( this, watcher ) );\n    watcher.addListener( Collection.Events.Remove, Listeners.CollectionRemove( this, watcher ) );\n    watcher.addListener( Collection.Events.Removes, Listeners.CollectionRemoves( this, watcher ) );\n    watcher.addListener( Collection.Events.Cleared, Listeners.CollectionCleared( this, watcher ) );\n\n    return watcher;\n  },\n\n  unwatch: function(object)\n  {\n    if ( object )\n    {\n      var watcher = this.getSessionWatch( object );\n\n      if ( watcher )\n      {\n        watcher.destroy( this );\n      }\n    }\n  },\n\n  saveModel: function(model)\n  {\n    var watcher = this.getSessionWatch( model );\n\n    if ( watcher && !watcher.save )\n    {\n      var key = model.$key();\n      var db = model.$db;\n\n      if ( db.models.has( key ) )\n      {\n        db.trigger( Database.Events.ModelUpdated, [model] );\n\n        model.$trigger( Model.Events.UpdateAndSave );\n      }\n      else\n      {\n        db.models.put( key, model );\n        db.trigger( Database.Events.ModelAdded, [model] );\n        db.updated();\n\n        model.$trigger( Model.Events.CreateAndSave );\n      }\n\n      watcher.save = true;\n    }\n  },\n\n  removeModel: function(model)\n  {\n    var watcher = this.getSessionWatch( model );\n\n    if ( watcher )\n    {\n      model.$push();\n      model.$status = Model.Status.RemovePending;\n      model.$db.removeFromModels( model );\n\n      this.removing.add( model );\n\n      watcher.destroy( this );\n    }\n  }\n\n});\n\n\nfunction SessionWatch( key, object )\n{\n  this.key = key;\n  this.object = object;\n  this.relations = false;\n  this.parent = false;\n  this.children = {};\n  this.offs = [];\n  this.save = false;\n}\n\naddMethods( SessionWatch.prototype,\n{\n\n  setRelations: function(relations)\n  {\n    if ( isObject( relations ) )\n    {\n      if ( this.relations && !equals( this.relations, relations ) )\n      {\n        throw 'Changing already watched relations is not allowed.';\n      }\n\n      this.relations = relations;\n    }\n  },\n\n  setSession: function(session)\n  {\n    var object = this.object;\n    var objectSession = object.$session;\n\n    if ( objectSession && objectSession !== session && !objectSession.isDestroyed() )\n    {\n      throw 'An object can only be watched by one live session at a time.';\n    }\n\n    object.$session = session;\n  },\n\n  setParent: function(parent)\n  {\n    this.parent = parent;\n\n    if ( parent )\n    {\n      parent.children[ this.key ] = this;\n    }\n  },\n\n  addListener: function(eventName, listener)\n  {\n    var object = this.object;\n    var off = noop;\n\n    if ( object.$on )\n    {\n      off = object.$on( eventName, listener );\n    }\n    else if ( object.on )\n    {\n      off = object.on( eventName, listener );\n    }\n\n    this.offs.push( off );\n  },\n\n  destroy: function(session)\n  {\n    var offs = this.offs;\n    var object = this.object;\n\n    for (var i = 0; i < offs.length; i++)\n    {\n      offs[ i ]();\n    }\n\n    session.watching.remove( this.key );\n\n    this.destroyChildren( session );\n\n    object.$session = null;\n\n    this.parent = null;\n    this.offs.length = 0;\n    this.save = false;\n  },\n\n  destroyChildren: function(session)\n  {\n    var children = this.children;\n\n    for (var childKey in children)\n    {\n      children[ childKey ].destroy( session );\n    }\n\n    this.children = {};\n  }\n\n});\n\n\n  Rekord.Session = Session;\n  Rekord.SessionWatch = SessionWatch;\n\n})(this, this.Rekord);\n"],"sourceRoot":"/source/"}