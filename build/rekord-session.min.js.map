{"version":3,"sources":["rekord-session.min.js"],"names":["root","factory","define","amd","Rekord","module","exports","global","require","this","undefined","Session","status","Status","Active","watching","Map","removing","unwatched","validationRequired","promise","Promise","resolve","SessionWatch","key","object","state","relations","parent","children","offs","save","cascade","options","searchAny","map","defaultResult","callback","context","watchers","values","i","length","watcher","result","call","searchModels","Model","Database","Collection","Class","ModelCollection","RelationHasOne","Relations","hasOne","RelationBelongsTo","belongsTo","Cascade","isObject","isNumber","uuid","equals","noop","addEventful","addEventFunction","keyParser","createParser","Listeners","RelationUpdate","session","related","property","relator","relation","isDestroyed","lastRelated","isWatching","unwatch","watch","CollectionAdd","collection","added","CollectionAdds","CollectionRemove","removed","CollectionRemoves","CollectionReset","moveChildren","CollectionCleared","replace","$save","setProperties","setValue","fakeIt","$session","isActive","$isDeleted","debug","Debugs","SAVE_DELETED","$db","$set","saveModel","apply","arguments","$remove","ignoreExists","isSaving","$exists","removeModel","Saving","Disabled","Destroyed","Events","Discard","SaveStart","SaveSuccess","SaveFailure","Destroy","Watch","Unwatch","Invalid","Valid","Changes","create","hasChanges","checkSavedOnly","size","unwatchedChanges","model","$hasChanges","watchedChanges","getChanged","out","target","push","validate","stopAtInvalid","valid","Validation","$validate","trigger","setValidationRequired","required","fullValidate","reject","isPending","sessionPromise","savePromise","singularity","handleSave","success","onSaveSuccess","complete","onSaveComplete","executeSave","executeRemove","executeUnwatchedSave","$isSaved","models","remove","$key","afterSave","$status","RemovePending","resync","afterRemove","afterUnwatchSave","resetSave","saveState","destroyReferences","destroy","isSuccess","onSaveSuccessUnwatched","reset","discard","discardRemove","discardUnwatched","discardSave","removeFromModels","restoreState","$updated","reattach","disable","enable","isEnabled","isDisabled","watches","remover","getSessionKey","$uid","$sessionKey","getSessionWatch","get","put","getAnyWatch","getRemoveWatch","has","isUnwatched","isRemoved","hasWatched","watchMany","setRelations","setSession","setParent","value","watchCollection","$getRelation","addListener","each","Add","Adds","Reset","Remove","Removes","Cleared","isDestroyable","moveTo","addCascade","db","ModelUpdated","$trigger","UpdateAndSave","ModelAdded","updated","CreateAndSave","Synced","objectSession","eventName","listener","off","$on","on","override","oldState","$savedState","$push","relationName","pluck","relationsWatched","relationsSnapshot","clearKey","cascadeRemove","None","$decode","snapshot","removeListeners","childKey","SessionListeners"],"mappings":"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","file":"rekord-session.min.js","sourcesContent":["/* rekord-session 1.5.1 - Adds mass changes & discards to Rekord by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define(['rekord'], function(Rekord) { // jshint ignore:line\n      return factory(root, Rekord);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global, require('rekord'));  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Rekord = factory(root, root.Rekord);\n  }\n}(this, function(global, Rekord, undefined)\n{\n\n  var Map = Rekord.Map;\n  var Model = Rekord.Model;\n  var Promise = Rekord.Promise;\n  var Database = Rekord.Database;\n  var Collection = Rekord.Collection;\n  var Class = Rekord.Class;\n  var ModelCollection = Rekord.ModelCollection;\n  var RelationHasOne = Rekord.Relations.hasOne;\n  var RelationBelongsTo = Rekord.Relations.belongsTo;\n  var Cascade = Rekord.Cascade;\n\n  var isObject = Rekord.isObject;\n  var isNumber = Rekord.isNumber;\n  var uuid = Rekord.uuid;\n  var equals = Rekord.equals;\n  var noop = Rekord.noop;\n\n  var addEventful = Rekord.addEventful;\n  var addEventFunction = Rekord.addEventFunction;\n\n  var keyParser = Rekord.createParser('$key()');\n\nvar Listeners = {\n\n  RelationUpdate: function(session, watcher, parent, related, property)\n  {\n    return function onRelationUpdate(relator, relation)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      if ( relation.lastRelated && session.isWatching( relation.lastRelated ) )\n      {\n        session.unwatch( relation.lastRelated );\n      }\n\n      if ( relation.related && !session.isWatching( relation.related ) )\n      {\n        session.watch( relation.related, watcher.relations[ property ], watcher );\n      }\n    };\n  },\n\n  CollectionAdd: function(session, watcher)\n  {\n    return function onAdd(collection, added)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      session.watch( added, watcher.relations, watcher );\n    };\n  },\n\n  CollectionAdds: function(session, watcher)\n  {\n    return function onAdds(collection, added)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      for (var i = 0; i < added.length; i++)\n      {\n        session.watch( added[ i ], watcher.relations, watcher );\n      }\n    };\n  },\n\n  CollectionRemove: function(session, watcher)\n  {\n    return function onRemove(collection, removed)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      session.unwatch( removed );\n    };\n  },\n\n  CollectionRemoves: function(session, watcher)\n  {\n    return function onRemoves(collection, removed)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      for (var i = 0; i < removed.length; i++)\n      {\n        session.unwatch( removed[ i ] );\n      }\n    };\n  },\n\n  CollectionReset: function(session, watcher)\n  {\n    return function onReset(collection)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      watcher.moveChildren( session.unwatched );\n\n      for (var i = 0; i < collection.length; i++)\n      {\n        session.watch( collection[ i ], watcher.relations, watcher );\n      }\n    };\n  },\n\n  CollectionCleared: function(session, watcher)\n  {\n    return function onCleared(collection)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      watcher.moveChildren( session.unwatched );\n    };\n  }\n\n};\n\n\nClass.replace( Model, '$save', function($save)\n{\n  return function(setProperties, setValue, cascade, options)\n  {\n    var fakeIt = this.$session && this.$session.isActive();\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( fakeIt )\n    {\n      if ( isObject( setProperties ) )\n      {\n        options = cascade;\n        cascade = setValue;\n        setValue = undefined;\n      }\n      else if ( isNumber( setProperties ) )\n      {\n        options = setValue;\n        cascade = setProperties;\n        setValue = undefined;\n        setProperties = undefined;\n      }\n\n      if ( !isNumber( cascade ) )\n      {\n        cascade = this.$db.cascade;\n      }\n\n      if ( setProperties !== undefined )\n      {\n        this.$set( setProperties, setValue );\n      }\n\n      this.$session.saveModel( this, cascade, options );\n\n      return Promise.resolve( this );\n    }\n\n    return $save.apply( this, arguments );\n  };\n});\n\nClass.replace( Model, '$remove', function($remove)\n{\n  return function(cascade, options)\n  {\n    var ignoreExists = this.$session && this.$session.isSaving();\n    var fakeIt = this.$session && this.$session.isActive();\n\n    if ( !this.$exists() && !ignoreExists )\n    {\n      return Promise.resolve( this );\n    }\n\n    if ( fakeIt )\n    {\n      this.$session.removeModel( this, cascade, options );\n\n      return Promise.resolve( this );\n    }\n\n    return $remove.apply( this, arguments );\n  };\n});\n\n\nfunction Session()\n{\n  this.status = Session.Status.Active;\n  this.watching = new Map();\n  this.removing = new Map();\n  this.unwatched = new Map();\n  this.validationRequired = false;\n  this.promise = Promise.resolve( this );\n}\n\nSession.Status =\n{\n  Active: 'active',\n\n  Saving: 'saving',\n\n  Disabled: 'disabled',\n\n  Destroyed: 'destroyed'\n};\n\nSession.Events =\n{\n  Discard: 'discard', // (Session)\n\n  SaveStart: 'save-start', // (Session)\n\n  SaveSuccess: 'save-sucess', // (Session)\n\n  SaveFailure: 'save-failure', // (Session)\n\n  Destroy: 'destroy', // (Session)\n\n  Watch: 'watch', // (Session, Model, SessionWatch)\n\n  Unwatch: 'unwatch',  // (Session, Collection, SessionWatch)\n\n  Invalid: 'invalid',  // (Session)\n\n  Valid: 'valid',  // (Session)\n\n  Changes: 'discard save-start save-success save-failure destroy'  // (Session)\n};\n\nClass.create( Session,\n{\n\n  hasChanges: function(checkSavedOnly)\n  {\n    if (this.removing.size() > 0)\n    {\n      return true;\n    }\n\n    var unwatchedChanges = searchModels( this.unwatched, false, function(model, watcher)\n    {\n      if ( (!checkSavedOnly || watcher.save) && model.$hasChanges() )\n      {\n        return true;\n      }\n    });\n\n    if ( unwatchedChanges )\n    {\n      return true;\n    }\n\n    var watchedChanges = searchModels( this.watching, false, function(model, watcher)\n    {\n      if ( (!checkSavedOnly || watcher.save) && model.$hasChanges() )\n      {\n        return true;\n      }\n    });\n\n    return watchedChanges;\n  },\n\n  getChanged: function(checkSavedOnly, out)\n  {\n    var target = out || new Collection();\n\n    target.push.apply( target, this.removing.values );\n\n    searchModels( this.watching, null, function(model, watcher)\n    {\n      if ( (!checkSavedOnly || watcher.save) && model.$hasChanges() )\n      {\n        target.push( model );\n      }\n    });\n\n    searchModels( this.unwatched, null, function(model, watcher)\n    {\n      if ( (!checkSavedOnly || watcher.save) && model.$hasChanges() )\n      {\n        target.push( model );\n      }\n    });\n\n    return target;\n  },\n\n  validate: function(stopAtInvalid)\n  {\n    var valid = true;\n\n    if ( Rekord.Validation )\n    {\n      searchModels( this.watching, true, function(model, watcher)\n      {\n        if ( model.$validate && !model.$validate() )\n        {\n          valid = false;\n\n          if ( stopAtInvalid )\n          {\n            return false;\n          }\n        }\n      });\n\n      if ( valid )\n      {\n        this.trigger( Session.Events.Valid, [this] );\n      }\n      else\n      {\n        this.trigger( Session.Events.Invalid, [this] );\n      }\n    }\n\n    return valid;\n  },\n\n  setValidationRequired: function(required)\n  {\n    this.validationRequired = required;\n  },\n\n  save: function(fullValidate)\n  {\n    if ( this.status !== Session.Status.Active )\n    {\n      return Promise.reject( this );\n    }\n\n    if ( this.validationRequired && !this.validate( !fullValidate ) )\n    {\n      return Promise.reject( this );\n    }\n\n    if ( this.promise.isPending() )\n    {\n      return Promise.reject( this );\n    }\n\n    this.trigger( Session.Events.SaveStart, [this] );\n\n    var sessionPromise = new Promise();\n\n    var savePromise = Promise.singularity( sessionPromise, this, this.handleSave );\n\n    sessionPromise.resolve( this );\n\n    savePromise.success( this.onSaveSuccess, this );\n    savePromise.complete( this.onSaveComplete, this );\n\n    this.promise = savePromise;\n\n    return savePromise;\n  },\n\n  handleSave: function(singularity)\n  {\n    this.status = Session.Status.Saving;\n\n    searchModels( this.watching, true, this.executeSave, this );\n\n    searchModels( this.removing, true, this.executeRemove, this );\n\n    searchAny( this.unwatched, true, this.executeUnwatchedSave, this );\n\n    this.status = Session.Status.Active;\n  },\n\n  executeSave: function(model, watcher)\n  {\n    if ( watcher.save )\n    {\n      // Remove it so $save processes normally\n      if ( !model.$isSaved() )\n      {\n        model.$db.models.remove( model.$key() );\n      }\n\n      model.$save( watcher.cascade, watcher.options ).success( this.afterSave( watcher ) );\n    }\n  },\n\n  executeRemove: function(model, watcher)\n  {\n    if ( model.$status === Model.Status.RemovePending )\n    {\n      this.resync( model );\n\n      model.$remove( watcher.cascade, watcher.options ).success( this.afterRemove( watcher, this ) );\n    }\n  },\n\n  executeUnwatchedSave: function(model, watcher)\n  {\n    if ( watcher.save )\n    {\n      if ( !model.$isSaved() )\n      {\n        model.$db.models.remove( model.$key() );\n      }\n\n      model.$save( watcher.cascade, watcher.options ).success( this.afterUnwatchSave( watcher ) );\n    }\n  },\n\n  afterSave: function(watcher)\n  {\n    return function onSave()\n    {\n      watcher.resetSave();\n      watcher.saveState( true );\n    };\n  },\n\n  afterRemove: function(watcher, session)\n  {\n    return function onRemove()\n    {\n      session.removing.remove( watcher.key );\n      watcher.destroyReferences();\n    };\n  },\n\n  afterUnwatchSave: function(watcher)\n  {\n    return function onSave()\n    {\n      watcher.destroy();\n    };\n  },\n\n  onSaveComplete: function()\n  {\n    if ( this.promise.isSuccess() )\n    {\n      this.trigger( Session.Events.SaveSuccess, [this] );\n    }\n    else\n    {\n      this.trigger( Session.Events.SaveFailure, [this] );\n    }\n  },\n\n  onSaveSuccess: function()\n  {\n    searchAny( this.unwatched, true, this.onSaveSuccessUnwatched, this );\n\n    this.removing.reset();\n    this.unwatched.reset();\n  },\n\n  onSaveSuccessUnwatched: function(model, watcher)\n  {\n    watcher.destroy();\n  },\n\n  discard: function()\n  {\n    searchModels( this.removing, true, this.discardRemove, this );\n\n    searchAny( this.unwatched, true, this.discardUnwatched, this );\n\n    searchModels( this.watching, true, this.discardSave, this );\n\n    this.removing.reset();\n    this.unwatched.reset();\n\n    return this;\n  },\n\n  discardSave: function(model, watcher)\n  {\n    if ( watcher.save && !model.$isSaved() )\n    {\n      model.$db.removeFromModels( model );\n    }\n\n    watcher.resetSave();\n    watcher.restoreState();\n\n    model.$updated();\n  },\n\n  discardRemove: function(model, watcher)\n  {\n    if ( model.$status === Model.Status.RemovePending )\n    {\n      this.resync( model );\n\n      watcher.reattach();\n    }\n  },\n\n  discardUnwatched: function(model, watcher)\n  {\n    watcher.reattach();\n  },\n\n  disable: function()\n  {\n    if ( this.status === Session.Status.Active )\n    {\n      this.status = Session.Status.Disabled;\n    }\n  },\n\n  enable: function()\n  {\n    if ( this.status === Session.Status.Disabled )\n    {\n      this.status = Session.Status.Active;\n    }\n  },\n\n  isEnabled: function()\n  {\n    return this.status !== Session.Status.Disabled &&\n           this.status !== Session.Status.Destroyed;\n  },\n\n  isActive: function()\n  {\n    return this.status === Session.Status.Active;\n  },\n\n  isDisabled: function()\n  {\n    return this.status === Session.Status.Disabled;\n  },\n\n  isSaving: function()\n  {\n    return this.status === Session.Status.Saving;\n  },\n\n  isDestroyed: function()\n  {\n    return this.status === Session.Status.Destroyed;\n  },\n\n  destroy: function()\n  {\n    if ( this.status !== Session.Status.Destroyed )\n    {\n      var watches = this.watching.values;\n\n      for (var i = 0; i < watches.length; i++)\n      {\n        var watcher = watches[ i ];\n\n        if ( !watcher.parent )\n        {\n          watcher.destroy();\n        }\n      }\n\n      var unwatched = this.unwatched.values;\n\n      for (var i = 0; i < unwatched.length; i++)\n      {\n        var watcher = unwatched[ i ];\n\n        if ( !watcher.parent )\n        {\n          watcher.destroy();\n        }\n      }\n\n      var removing = this.removing.values;\n\n      for (var i = 0; i < removing.length; i++)\n      {\n        var remover = removing[ i ];\n\n        remover.destroyReferences();\n      }\n\n      this.watching.reset();\n      this.unwatched.reset();\n      this.removing.reset();\n\n      this.status = Session.Status.Destroyed;\n      this.trigger( Session.Events.Destroy, [this] );\n    }\n  },\n\n  getSessionKey: function(object, create)\n  {\n    if ( object instanceof Model )\n    {\n      return object.$uid();\n    }\n    else if ( object instanceof ModelCollection )\n    {\n      if ( !object.$sessionKey && create )\n      {\n        object.$sessionKey = uuid();\n      }\n\n      return object.$sessionKey;\n    }\n    else if ( create )\n    {\n      throw 'The object provided cannot be watched by session.';\n    }\n  },\n\n  getSessionWatch: function(object, create)\n  {\n    var key = this.getSessionKey( object, create );\n\n    if ( key )\n    {\n      var watch = this.watching.get( key );\n\n      if ( !watch && create )\n      {\n        watch = this.unwatched.get( key );\n\n        this.unwatched.remove( key );\n\n        if ( watch )\n        {\n          this.watching.put( key, watch );\n        }\n      }\n\n      if ( !watch && create )\n      {\n        watch = new SessionWatch( key, object );\n\n        this.watching.put( key, watch );\n      }\n\n      return watch;\n    }\n  },\n\n  getAnyWatch: function(object)\n  {\n    var key = this.getSessionKey( object );\n\n    if ( key )\n    {\n      return this.watching.get( key ) || this.unwatched.get( key );\n    }\n  },\n\n  getRemoveWatch: function(object)\n  {\n    var key = this.getSessionKey( object );\n\n    if ( key )\n    {\n      return this.removing.get( key );\n    }\n  },\n\n  isWatching: function(object)\n  {\n    var key = this.getSessionKey( object );\n\n    return key && this.watching.has( key );\n  },\n\n  isUnwatched: function(object)\n  {\n    var key = this.getSessionKey( object );\n\n    return key && this.unwatched.has( key );\n  },\n\n  isRemoved: function(object)\n  {\n    var key = this.getSessionKey( object );\n\n    return key && this.removing.has( key );\n  },\n\n  hasWatched: function(object)\n  {\n    var key = this.getSessionKey( object );\n\n    return key && ( this.watching.has( key ) || this.removing.has( key ) || this.unwatched.has( key ) );\n  },\n\n  watchMany: function(models, relations)\n  {\n    var watchers = [];\n\n    for (var i = 0; i < models.length; i++)\n    {\n      watchers.push( this.watch( models[ i ], relations ) );\n    }\n\n    return watchers;\n  },\n\n  // Watching is typically performed on saved models without changes.\n  watch: function(model, relations, parent)\n  {\n    var watcher = this.getSessionWatch( model, true );\n\n    watcher.setRelations( relations );\n    watcher.setSession( this );\n    watcher.setParent( parent );\n    watcher.saveState();\n\n    if ( isObject( relations ) )\n    {\n      for (var property in relations)\n      {\n        var value = model[ property ];\n\n        if ( value instanceof Model )\n        {\n          this.watch( value, relations[ property ], watcher );\n        }\n        else if ( value instanceof ModelCollection )\n        {\n          this.watchCollection( value, relations[ property ], watcher );\n        }\n\n        var relation = model.$getRelation( property );\n\n        if ( relation instanceof RelationHasOne || relation instanceof RelationBelongsTo )\n        {\n          watcher.addListener( Model.Events.RelationUpdate, Listeners.RelationUpdate( this, watcher, model, value, property ) );\n        }\n      }\n    }\n\n    this.trigger( Session.Events.Watch, [this, model, watcher] );\n\n    return watcher;\n  },\n\n  // Watching is typically performed on saved models without changes.\n  watchCollection: function(collection, relations, parent)\n  {\n    var watcher = this.getSessionWatch( collection, true );\n\n    watcher.setRelations( relations );\n    watcher.setSession( this );\n    watcher.setParent( parent );\n\n    collection.each(function(model)\n    {\n      this.watch( model, relations, watcher );\n\n    }, this );\n\n    watcher.addListener( Collection.Events.Add, Listeners.CollectionAdd( this, watcher ) );\n    watcher.addListener( Collection.Events.Adds, Listeners.CollectionAdds( this, watcher ) );\n    watcher.addListener( Collection.Events.Reset, Listeners.CollectionReset( this, watcher ) );\n    watcher.addListener( Collection.Events.Remove, Listeners.CollectionRemove( this, watcher ) );\n    watcher.addListener( Collection.Events.Removes, Listeners.CollectionRemoves( this, watcher ) );\n    watcher.addListener( Collection.Events.Cleared, Listeners.CollectionCleared( this, watcher ) );\n\n    this.trigger( Session.Events.Watch, [this, collection, watcher] );\n\n    return watcher;\n  },\n\n  unwatch: function(object)\n  {\n    if ( object )\n    {\n      var watcher = this.getSessionWatch( object );\n\n      if ( watcher )\n      {\n        if ( this.isDestroyable( object ) )\n        {\n          watcher.destroy();\n        }\n        else\n        {\n          watcher.resetSave();\n          watcher.moveTo( this.unwatched );\n        }\n\n        this.trigger( Session.Events.Unwatch, [this, object, watcher] );\n      }\n    }\n  },\n\n  saveModel: function(model, cascade, options)\n  {\n    // Search in either watching or unwatched. An unwatched model is one that\n    // could have recently been reunlated from another model and might need\n    // it's foreign key saved.\n    var watcher = this.getAnyWatch( model );\n\n    if ( watcher )\n    {\n      watcher.addCascade( cascade );\n      watcher.options = options;\n\n      if ( !watcher.save )\n      {\n        var key = model.$key();\n        var db = model.$db;\n\n        if ( db.models.has( key ) )\n        {\n          db.trigger( Database.Events.ModelUpdated, [model] );\n\n          model.$trigger( Model.Events.UpdateAndSave );\n        }\n        else\n        {\n          db.models.put( key, model );\n          db.trigger( Database.Events.ModelAdded, [model] );\n          db.updated();\n\n          model.$trigger( Model.Events.CreateAndSave );\n        }\n\n        watcher.save = true;\n      }\n    }\n  },\n\n  removeModel: function(model, cascade, options)\n  {\n    // Search in either watching or unwatched. An unwatched model is one that\n    // could have recently been unrelated from another model.\n    var watcher = this.getAnyWatch( model );\n\n    if ( watcher )\n    {\n      if ( this.isDestroyable( model ) )\n      {\n        watcher.destroy();\n      }\n      else\n      {\n        watcher.resetSave();\n        watcher.addCascade( cascade );\n        watcher.options = options;\n        watcher.moveTo( this.removing );\n\n        model.$status = Model.Status.RemovePending;\n        model.$db.removeFromModels( model );\n      }\n    }\n    else\n    {\n      var removed = this.getRemoveWatch( model );\n\n      if ( removed )\n      {\n        removed.addCascade( cascade );\n        removed.options = options;\n      }\n    }\n  },\n\n  isDestroyable: function(object)\n  {\n    return object instanceof Model && !object.$isSaved();\n  },\n\n  resync: function(model)\n  {\n    model.$status = Model.Status.Synced;\n    model.$db.models.put( model.$key(), model );\n  }\n\n});\n\naddEventful( Session );\n\naddEventFunction( Session, 'change', Session.Events.Changes );\n\n\nfunction SessionWatch( key, object )\n{\n  this.key = key;\n  this.object = object;\n  this.state = null;\n  this.relations = false;\n  this.parent = false;\n  this.children = {};\n  this.offs = [];\n  this.save = false;\n  this.cascade = undefined;\n  this.options = undefined;\n  this.state = null;\n}\n\nClass.create( SessionWatch,\n{\n\n  setRelations: function(relations)\n  {\n    if ( isObject( relations ) )\n    {\n      if ( this.relations && !equals( this.relations, relations ) )\n      {\n        throw 'Changing already watched relations is not allowed.';\n      }\n\n      this.relations = relations;\n    }\n  },\n\n  setSession: function(session)\n  {\n    var object = this.object;\n    var objectSession = object.$session;\n\n    if ( objectSession && objectSession !== session && !objectSession.isDestroyed() )\n    {\n      throw 'An object can only be watched by one live session at a time.';\n    }\n\n    object.$session = session;\n  },\n\n  setParent: function(parent)\n  {\n    this.parent = parent;\n\n    if ( parent )\n    {\n      parent.children[ this.key ] = this;\n    }\n  },\n\n  addListener: function(eventName, listener)\n  {\n    var object = this.object;\n    var off = noop;\n\n    if ( object.$on )\n    {\n      off = object.$on( eventName, listener );\n    }\n    else if ( object.on )\n    {\n      off = object.on( eventName, listener );\n    }\n\n    this.offs.push( off );\n  },\n\n  addCascade: function(cascade)\n  {\n    if ( isNumber( cascade ) )\n    {\n      if ( this.cascade === undefined )\n      {\n        this.cascade = 0;\n      }\n\n      this.cascade = this.cascade | cascade;\n    }\n  },\n\n  resetSave: function()\n  {\n    this.save = false;\n    this.cascade = undefined;\n    this.options = undefined;\n  },\n\n  saveState: function(override)\n  {\n    if ( this.state && !override )\n    {\n      return;\n    }\n\n    var model = this.object;\n    var oldState = model.$savedState;\n\n    model.$push();\n\n    var relations = this.relations;\n    var state = model.$savedState;\n\n    if ( isObject( relations ) )\n    {\n      for (var relationName in relations)\n      {\n        var value = model[ relationName ];\n\n        if ( value instanceof Model )\n        {\n          state[ relationName ] = value.$key();\n        }\n        else if ( value instanceof ModelCollection )\n        {\n          state[ relationName ] = value.pluck( keyParser );\n        }\n        else\n        {\n          state[ relationName ] = null;\n        }\n      }\n    }\n\n    this.state = state;\n\n    model.$savedState = oldState;\n  },\n\n  restoreState: function()\n  {\n    var model = this.object;\n    var state = this.state;\n\n    if ( isObject( state ) )\n    {\n      var relations = model.$db.relations;\n      var relationsWatched = this.relations;\n      var relationsSnapshot = {};\n\n      for (var relationName in relationsWatched)\n      {\n        var relation = relations[ relationName ];\n\n        relationsSnapshot[ relationName ] = {\n          clearKey: relation.clearKey,\n          cascadeRemove: relation.cascadeRemove,\n          cascade: relation.cascade\n        };\n\n        relation.clearKey = false;\n        relation.cascadeRemove = Cascade.None;\n        relation.cascade = Cascade.None;\n      }\n\n      model.$set( state, undefined, true, true );\n      model.$decode();\n\n      for (var relationName in relationsWatched)\n      {\n        var relation = relations[ relationName ];\n        var snapshot = relationsSnapshot[ relationName ];\n\n        relation.clearKey = snapshot.clearKey;\n        relation.cascadeRemove = snapshot.cascadeRemove;\n        relation.cascade = snapshot.cascade;\n      }\n    }\n  },\n\n  removeListeners: function()\n  {\n    var offs = this.offs;\n\n    for (var i = 0; i < offs.length; i++)\n    {\n      offs[ i ]();\n    }\n\n    offs.length = 0;\n  },\n\n  moveTo: function(target)\n  {\n    var session = this.object.$session;\n\n    this.removeListeners();\n    this.moveChildren( target );\n\n    if ( this.parent )\n    {\n      delete this.parent.children[ this.key ];\n    }\n\n    session.watching.remove( this.key );\n    session.unwatched.remove( this.key );\n    session.removing.remove( this.key );\n\n    target.put( this.key, this );\n  },\n\n  reattach: function()\n  {\n    var session = this.object.$session;\n\n    session.removing.remove( this.key );\n    session.unwatched.remove( this.key );\n    session.watching.put( this.key, this );\n\n    session.watch( this.object, this.relations, this.parent );\n  },\n\n  destroy: function()\n  {\n    var children = this.children;\n\n    this.children = {};\n    this.removeListeners();\n    this.destroyReferences();\n\n    for (var childKey in children)\n    {\n      children[ childKey ].destroy();\n    }\n  },\n\n  destroyReferences: function()\n  {\n    var session = this.object.$session;\n\n    session.watching.remove( this.key );\n    session.removing.remove( this.key );\n    session.unwatched.remove( this.key );\n\n    this.object.$session = null;\n    this.state = null;\n\n    this.parent = null;\n    this.save = false;\n    this.cascade = undefined;\n    this.options = undefined;\n  },\n\n  moveChildren: function(target)\n  {\n    var children = this.children;\n\n    for (var childKey in children)\n    {\n      children[ childKey ].moveTo( target );\n    }\n  }\n\n});\n\n\nfunction searchAny(map, defaultResult, callback, context)\n{\n  var watchers = map.values;\n\n  for (var i = watchers.length - 1; i >= 0; i--)\n  {\n    var watcher = watchers[ i ];\n    var result = callback.call( context, watcher.object, watcher );\n\n    if ( result !== undefined )\n    {\n      return result;\n    }\n  }\n\n  return defaultResult;\n}\n\nfunction searchModels(map, defaultResult, callback, context)\n{\n  var watchers = map.values;\n\n  for (var i = watchers.length - 1; i >= 0; i--)\n  {\n    var watcher = watchers[ i ];\n\n    if ( watcher.object instanceof Model )\n    {\n      var result = callback.call( context, watcher.object, watcher );\n\n      if ( result !== undefined )\n      {\n        return result;\n      }\n    }\n  }\n\n  return defaultResult;\n}\n\n\n  Rekord.Session = Session;\n  Rekord.SessionWatch = SessionWatch;\n  Rekord.SessionListeners = Listeners;\n\n  return Rekord;\n\n}));\n"],"sourceRoot":"/source/"}