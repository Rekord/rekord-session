{"version":3,"sources":["rekord-session.min.js"],"names":["global","Rekord","undefined","Session","this","status","Status","Active","watching","Map","removing","unwatched","validationRequired","SessionWatch","key","object","state","relations","parent","children","offs","save","cascade","searchAny","map","defaultResult","callback","context","watchers","values","i","length","watcher","result","call","searchModels","Model","Promise","Database","Collection","ModelCollection","RelationHasOne","Relations","hasOne","RelationBelongsTo","belongsTo","Cascade","isObject","isNumber","uuid","equals","noop","addMethods","replaceMethod","keyParser","createParser","Listeners","RelationUpdate","session","related","property","relator","relation","isDestroyed","lastRelated","isWatching","unwatch","watch","CollectionAdd","collection","added","CollectionAdds","CollectionRemove","removed","CollectionRemoves","CollectionReset","moveChildren","CollectionCleared","prototype","$save","setProperties","setValue","fakeIt","$session","isActive","$isDeleted","debug","Debugs","SAVE_DELETED","$db","resolve","arguments","$set","saveModel","apply","$remove","ignoreExists","isSaving","$exists","removeModel","Saving","Disabled","Destroyed","hasChanges","checkSavedOnly","size","unwatchedChanges","model","$hasChanges","watchedChanges","getChanged","out","target","push","validate","stopAtInvalid","valid","Validation","$validate","setValidationRequired","required","fullValidate","reject","sessionPromise","savePromise","singularity","handleSave","success","onSaveSuccess","executeSave","executeRemove","executeUnwatchedSave","$isSaved","models","remove","$key","afterSave","$status","RemovePending","resync","afterRemove","afterUnwatchSave","resetSave","saveState","destroyReferences","destroy","onSaveSuccessUnwatched","reset","discard","discardRemove","discardUnwatched","discardSave","removeFromModels","restoreState","$updated","reattach","disable","enable","isEnabled","isDisabled","watches","remover","getSessionKey","create","$uid","$sessionKey","getSessionWatch","get","put","getAnyWatch","getRemoveWatch","has","isUnwatched","isRemoved","hasWatched","watchMany","setRelations","setSession","setParent","value","watchCollection","$getRelation","addListener","Events","each","Add","Adds","Reset","Remove","Removes","Cleared","isDestroyable","moveTo","addCascade","db","trigger","ModelUpdated","$trigger","UpdateAndSave","ModelAdded","updated","CreateAndSave","Synced","objectSession","eventName","listener","off","$on","on","override","oldState","$savedState","$push","relationName","pluck","relationsWatched","relationsSnapshot","clearKey","cascadeRemove","None","$decode","snapshot","removeListeners","childKey"],"mappings":"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","file":"rekord-session.min.js","sourcesContent":["/* rekord-session 1.4.1 - Adds mass changes & discards to Rekord by Philip Diffenderfer */\n(function(global, Rekord, undefined)\n{\n  var Map = Rekord.Map;\n  var Model = Rekord.Model;\n  var Promise = Rekord.Promise;\n  var Database = Rekord.Database;\n  var Collection = Rekord.Collection;\n  var ModelCollection = Rekord.ModelCollection;\n  var RelationHasOne = Rekord.Relations.hasOne;\n  var RelationBelongsTo = Rekord.Relations.belongsTo;\n  var Cascade = Rekord.Cascade;\n\n  var isObject = Rekord.isObject;\n  var isNumber = Rekord.isNumber;\n  var uuid = Rekord.uuid;\n  var equals = Rekord.equals;\n  var noop = Rekord.noop;\n\n  var addMethods = Rekord.addMethods;\n  var replaceMethod = Rekord.replaceMethod;\n\n  var keyParser = Rekord.createParser('$key()');\n\nvar Listeners = {\n\n  RelationUpdate: function(session, watcher, parent, related, property)\n  {\n    return function onRelationUpdate(relator, relation)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      if ( relation.lastRelated && session.isWatching( relation.lastRelated ) )\n      {\n        session.unwatch( relation.lastRelated );\n      }\n\n      if ( relation.related && !session.isWatching( relation.related ) )\n      {\n        session.watch( relation.related, watcher.relations[ property ], watcher );\n      }\n    };\n  },\n\n  CollectionAdd: function(session, watcher)\n  {\n    return function onAdd(collection, added)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      session.watch( added, watcher.relations, watcher );\n    };\n  },\n\n  CollectionAdds: function(session, watcher)\n  {\n    return function onAdds(collection, added)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      for (var i = 0; i < added.length; i++)\n      {\n        session.watch( added[ i ], watcher.relations, watcher );\n      }\n    };\n  },\n\n  CollectionRemove: function(session, watcher)\n  {\n    return function onRemove(collection, removed)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      session.unwatch( removed );\n    };\n  },\n\n  CollectionRemoves: function(session, watcher)\n  {\n    return function onRemoves(collection, removed)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      for (var i = 0; i < removed.length; i++)\n      {\n        session.unwatch( removed[ i ] );\n      }\n    };\n  },\n\n  CollectionReset: function(session, watcher)\n  {\n    return function onReset(collection)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      watcher.moveChildren( session.unwatched );\n\n      for (var i = 0; i < collection.length; i++)\n      {\n        session.watch( collection[ i ], watcher.relations, watcher );\n      }\n    };\n  },\n\n  CollectionCleared: function(session, watcher)\n  {\n    return function onCleared(collection)\n    {\n      if ( session.isDestroyed() )\n      {\n        return;\n      }\n\n      watcher.moveChildren( session.unwatched );\n    };\n  }\n\n};\n\n\nreplaceMethod( Model.prototype, '$save', function($save)\n{\n  return function(setProperties, setValue, cascade)\n  {\n    var fakeIt = this.$session && this.$session.isActive();\n\n    if ( this.$isDeleted() )\n    {\n      Rekord.debug( Rekord.Debugs.SAVE_DELETED, this.$db, this );\n\n      return Promise.resolve( this );\n    }\n\n    if ( fakeIt )\n    {\n      var cascade =\n        (arguments.length === 3 ? cascade :\n          (arguments.length === 2 && isObject( setProperties ) && isNumber( setValue ) ? setValue :\n            (arguments.length === 1 && isNumber( setProperties ) ?  setProperties : this.$db.cascade ) ) );\n\n      this.$set( setProperties, setValue );\n\n      this.$session.saveModel( this, cascade );\n\n      return Promise.resolve( this );\n    }\n\n    return $save.apply( this, arguments );\n  };\n});\n\nreplaceMethod( Model.prototype, '$remove', function($remove)\n{\n  return function(cascade)\n  {\n    var ignoreExists = this.$session && this.$session.isSaving();\n    var fakeIt = this.$session && this.$session.isActive();\n\n    if ( !this.$exists() && !ignoreExists )\n    {\n      return Promise.resolve( this );\n    }\n\n    if ( fakeIt )\n    {\n      this.$session.removeModel( this, cascade );\n\n      return Promise.resolve( this );\n    }\n\n    return $remove.apply( this, arguments );\n  };\n});\n\n\nfunction Session()\n{\n  this.status = Session.Status.Active;\n  this.watching = new Map();\n  this.removing = new Map();\n  this.unwatched = new Map();\n  this.validationRequired = false;\n}\n\nSession.Status =\n{\n  Active: 'active',\n\n  Saving: 'saving',\n\n  Disabled: 'disabled',\n\n  Destroyed: 'destroyed'\n};\n\naddMethods( Session.prototype,\n{\n\n  hasChanges: function(checkSavedOnly)\n  {\n    if (this.removing.size() > 0)\n    {\n      return true;\n    }\n\n    var unwatchedChanges = searchModels( this.unwatched, false, function(model, watcher)\n    {\n      if ( (!checkSavedOnly || watcher.save) && model.$hasChanges() )\n      {\n        return true;\n      }\n    });\n\n    if ( unwatchedChanges )\n    {\n      return true;\n    }\n\n    var watchedChanges = searchModels( this.watching, false, function(model, watcher)\n    {\n      if ( (!checkSavedOnly || watcher.save) && model.$hasChanges() )\n      {\n        return true;\n      }\n    });\n\n    return watchedChanges;\n  },\n\n  getChanged: function(checkSavedOnly, out)\n  {\n    var target = out || new Collection();\n\n    target.push.apply( target, this.removing.values );\n\n    searchModels( this.watching, null, function(model, watcher)\n    {\n      if ( (!checkSavedOnly || watcher.save) && model.$hasChanges() )\n      {\n        target.push( model );\n      }\n    });\n\n    searchModels( this.unwatched, null, function(model, watcher)\n    {\n      if ( (!checkSavedOnly || watcher.save) && model.$hasChanges() )\n      {\n        target.push( model );\n      }\n    });\n\n    return target;\n  },\n\n  validate: function(stopAtInvalid)\n  {\n    var valid = true;\n\n    if ( Rekord.Validation )\n    {\n      searchModels( this.watching, true, function(model, watcher)\n      {\n        if ( model.$validate && !model.$validate() )\n        {\n          valid = false;\n\n          if ( stopAtInvalid )\n          {\n            return false;\n          }\n        }\n      });\n    }\n\n    return valid;\n  },\n\n  setValidationRequired: function(required)\n  {\n    this.validationRequired = required;\n  },\n\n  save: function(fullValidate)\n  {\n    if ( this.status !== Session.Status.Active )\n    {\n      return Promise.reject( this );\n    }\n\n    if ( this.validationRequired && !this.validate( !fullValidate ) )\n    {\n      return Promise.reject( this );\n    }\n\n    var sessionPromise = new Promise();\n\n    var savePromise = Promise.singularity( sessionPromise, this, this.handleSave );\n\n    sessionPromise.resolve( this );\n\n    savePromise.success( this.onSaveSuccess, this );\n\n    return savePromise;\n  },\n\n  handleSave: function(singularity)\n  {\n    this.status = Session.Status.Saving;\n\n    searchModels( this.watching, true, this.executeSave, this );\n\n    searchModels( this.removing, true, this.executeRemove, this );\n\n    searchAny( this.unwatched, true, this.executeUnwatchedSave, this );\n\n    this.status = Session.Status.Active;\n  },\n\n  executeSave: function(model, watcher)\n  {\n    if ( watcher.save )\n    {\n      // Remove it so $save processes normally\n      if ( !model.$isSaved() )\n      {\n        model.$db.models.remove( model.$key() );\n      }\n\n      model.$save( watcher.cascade ).success( this.afterSave( watcher ) );\n    }\n  },\n\n  executeRemove: function(model, watcher)\n  {\n    if ( model.$status === Model.Status.RemovePending )\n    {\n      this.resync( model );\n\n      model.$remove( watcher.cascade ).success( this.afterRemove( watcher, this ) );\n    }\n  },\n\n  executeUnwatchedSave: function(model, watcher)\n  {\n    if ( watcher.save )\n    {\n      if ( !model.$isSaved() )\n      {\n        model.$db.models.remove( model.$key() );\n      }\n\n      model.$save( watcher.cascade ).success( this.afterUnwatchSave( watcher ) );\n    }\n  },\n\n  afterSave: function(watcher)\n  {\n    return function onSave()\n    {\n      watcher.resetSave();\n      watcher.saveState( true );\n    };\n  },\n\n  afterRemove: function(watcher, session)\n  {\n    return function onRemove()\n    {\n      session.removing.remove( watcher.key );\n      watcher.destroyReferences();\n    };\n  },\n\n  afterUnwatchSave: function(watcher)\n  {\n    return function onSave()\n    {\n      watcher.destroy();\n    };\n  },\n\n  onSaveSuccess: function()\n  {\n    searchAny( this.unwatched, true, this.onSaveSuccessUnwatched, this );\n\n    this.removing.reset();\n    this.unwatched.reset();\n  },\n\n  onSaveSuccessUnwatched: function(model, watcher)\n  {\n    watcher.destroy();\n  },\n\n  discard: function()\n  {\n    searchModels( this.removing, true, this.discardRemove, this );\n\n    searchAny( this.unwatched, true, this.discardUnwatched, this );\n\n    searchModels( this.watching, true, this.discardSave, this );\n\n    this.removing.reset();\n    this.unwatched.reset();\n\n    return this;\n  },\n\n  discardSave: function(model, watcher)\n  {\n    if ( watcher.save && !model.$isSaved() )\n    {\n      model.$db.removeFromModels( model );\n    }\n\n    watcher.resetSave();\n    watcher.restoreState();\n\n    model.$updated();\n  },\n\n  discardRemove: function(model, watcher)\n  {\n    if ( model.$status === Model.Status.RemovePending )\n    {\n      this.resync( model );\n\n      watcher.reattach();\n    }\n  },\n\n  discardUnwatched: function(model, watcher)\n  {\n    watcher.reattach();\n  },\n\n  disable: function()\n  {\n    if ( this.status === Session.Status.Active )\n    {\n      this.status = Session.Status.Disabled;\n    }\n  },\n\n  enable: function()\n  {\n    if ( this.status === Session.Status.Disabled )\n    {\n      this.status = Session.Status.Active;\n    }\n  },\n\n  isEnabled: function()\n  {\n    return this.status !== Session.Status.Disabled &&\n           this.status !== Session.Status.Destroyed;\n  },\n\n  isActive: function()\n  {\n    return this.status === Session.Status.Active;\n  },\n\n  isDisabled: function()\n  {\n    return this.status === Session.Status.Disabled;\n  },\n\n  isSaving: function()\n  {\n    return this.status === Session.Status.Saving;\n  },\n\n  isDestroyed: function()\n  {\n    return this.status === Session.Status.Destroyed;\n  },\n\n  destroy: function()\n  {\n    if ( this.status !== Session.Status.Destroyed )\n    {\n      var watches = this.watching.values;\n\n      for (var i = 0; i < watches.length; i++)\n      {\n        var watcher = watches[ i ];\n\n        if ( !watcher.parent )\n        {\n          watcher.destroy();\n        }\n      }\n\n      var unwatched = this.unwatched.values;\n\n      for (var i = 0; i < unwatched.length; i++)\n      {\n        var watcher = unwatched[ i ];\n\n        if ( !watcher.parent )\n        {\n          watcher.destroy();\n        }\n      }\n\n      var removing = this.removing.values;\n\n      for (var i = 0; i < removing.length; i++)\n      {\n        var remover = removing[ i ];\n\n        remover.destroyReferences();\n      }\n\n      this.watching.reset();\n      this.unwatched.reset();\n      this.removing.reset();\n\n      this.status = Session.Status.Destroyed;\n    }\n  },\n\n  getSessionKey: function(object, create)\n  {\n    if ( object instanceof Model )\n    {\n      return object.$uid();\n    }\n    else if ( object instanceof ModelCollection )\n    {\n      if ( !object.$sessionKey && create )\n      {\n        object.$sessionKey = uuid();\n      }\n\n      return object.$sessionKey;\n    }\n    else if ( create )\n    {\n      throw 'The object provided cannot be watched by session.';\n    }\n  },\n\n  getSessionWatch: function(object, create)\n  {\n    var key = this.getSessionKey( object, create );\n\n    if ( key )\n    {\n      var watch = this.watching.get( key );\n\n      if ( !watch && create )\n      {\n        watch = this.unwatched.get( key );\n\n        this.unwatched.remove( key );\n\n        if ( watch )\n        {\n          this.watching.put( key, watch );\n        }\n      }\n\n      if ( !watch && create )\n      {\n        watch = new SessionWatch( key, object );\n\n        this.watching.put( key, watch );\n      }\n\n      return watch;\n    }\n  },\n\n  getAnyWatch: function(object)\n  {\n    var key = this.getSessionKey( object );\n\n    if ( key )\n    {\n      return this.watching.get( key ) || this.unwatched.get( key );\n    }\n  },\n\n  getRemoveWatch: function(object)\n  {\n    var key = this.getSessionKey( object );\n\n    if ( key )\n    {\n      return this.removing.get( key );\n    }\n  },\n\n  isWatching: function(object)\n  {\n    var key = this.getSessionKey( object );\n\n    return key && this.watching.has( key );\n  },\n\n  isUnwatched: function(object)\n  {\n    var key = this.getSessionKey( object );\n\n    return key && this.unwatched.has( key );\n  },\n\n  isRemoved: function(object)\n  {\n    var key = this.getSessionKey( object );\n\n    return key && this.removing.has( key );\n  },\n\n  hasWatched: function(object)\n  {\n    var key = this.getSessionKey( object );\n\n    return key && ( this.watching.has( key ) || this.removing.has( key ) || this.unwatched.has( key ) );\n  },\n\n  watchMany: function(models, relations)\n  {\n    var watchers = [];\n\n    for (var i = 0; i < models.length; i++)\n    {\n      watchers.push( this.watch( models[ i ], relations ) );\n    }\n\n    return watchers;\n  },\n\n  // Watching is typically performed on saved models without changes.\n  watch: function(model, relations, parent)\n  {\n    var watcher = this.getSessionWatch( model, true );\n\n    watcher.setRelations( relations );\n    watcher.setSession( this );\n    watcher.setParent( parent );\n    watcher.saveState();\n\n    if ( isObject( relations ) )\n    {\n      for (var property in relations)\n      {\n        var value = model[ property ];\n\n        if ( value instanceof Model )\n        {\n          this.watch( value, relations[ property ], watcher );\n        }\n        else if ( value instanceof ModelCollection )\n        {\n          this.watchCollection( value, relations[ property ], watcher );\n        }\n\n        var relation = model.$getRelation( property );\n\n        if ( relation instanceof RelationHasOne || relation instanceof RelationBelongsTo )\n        {\n          watcher.addListener( Model.Events.RelationUpdate, Listeners.RelationUpdate( this, watcher, model, value, property ) );\n        }\n      }\n    }\n\n    return watcher;\n  },\n\n  // Watching is typically performed on saved models without changes.\n  watchCollection: function(collection, relations, parent)\n  {\n    var watcher = this.getSessionWatch( collection, true );\n\n    watcher.setRelations( relations );\n    watcher.setSession( this );\n    watcher.setParent( parent );\n\n    collection.each(function(model)\n    {\n      this.watch( model, relations, watcher );\n\n    }, this );\n\n    watcher.addListener( Collection.Events.Add, Listeners.CollectionAdd( this, watcher ) );\n    watcher.addListener( Collection.Events.Adds, Listeners.CollectionAdds( this, watcher ) );\n    watcher.addListener( Collection.Events.Reset, Listeners.CollectionReset( this, watcher ) );\n    watcher.addListener( Collection.Events.Remove, Listeners.CollectionRemove( this, watcher ) );\n    watcher.addListener( Collection.Events.Removes, Listeners.CollectionRemoves( this, watcher ) );\n    watcher.addListener( Collection.Events.Cleared, Listeners.CollectionCleared( this, watcher ) );\n\n    return watcher;\n  },\n\n  unwatch: function(object)\n  {\n    if ( object )\n    {\n      var watcher = this.getSessionWatch( object );\n\n      if ( watcher )\n      {\n        if ( this.isDestroyable( object ) )\n        {\n          watcher.destroy();\n        }\n        else\n        {\n          watcher.resetSave();\n          watcher.moveTo( this.unwatched );\n        }\n      }\n    }\n  },\n\n  saveModel: function(model, cascade)\n  {\n    // Search in either watching or unwatched. An unwatched model is one that\n    // could have recently been reunlated from another model and might need\n    // it's foreign key saved.\n    var watcher = this.getAnyWatch( model );\n\n    if ( watcher )\n    {\n      watcher.addCascade( cascade );\n\n      if ( !watcher.save )\n      {\n        var key = model.$key();\n        var db = model.$db;\n\n        if ( db.models.has( key ) )\n        {\n          db.trigger( Database.Events.ModelUpdated, [model] );\n\n          model.$trigger( Model.Events.UpdateAndSave );\n        }\n        else\n        {\n          db.models.put( key, model );\n          db.trigger( Database.Events.ModelAdded, [model] );\n          db.updated();\n\n          model.$trigger( Model.Events.CreateAndSave );\n        }\n\n        watcher.save = true;\n      }\n    }\n  },\n\n  removeModel: function(model, cascade)\n  {\n    // Search in either watching or unwatched. An unwatched model is one that\n    // could have recently been unrelated from another model.\n    var watcher = this.getAnyWatch( model );\n\n    if ( watcher )\n    {\n      if ( this.isDestroyable( model ) )\n      {\n        watcher.destroy();\n      }\n      else\n      {\n        watcher.resetSave();\n        watcher.addCascade( cascade );\n        watcher.moveTo( this.removing );\n\n        model.$status = Model.Status.RemovePending;\n        model.$db.removeFromModels( model );\n      }\n    }\n    else\n    {\n      var removed = this.getRemoveWatch( model );\n\n      if ( removed )\n      {\n        removed.addCascade( cascade );\n      }\n    }\n  },\n\n  isDestroyable: function(object)\n  {\n    return object instanceof Model && !object.$isSaved();\n  },\n\n  resync: function(model)\n  {\n    model.$status = Model.Status.Synced;\n    model.$db.models.put( model.$key(), model );\n  }\n\n});\n\n\nfunction SessionWatch( key, object )\n{\n  this.key = key;\n  this.object = object;\n  this.state = null;\n  this.relations = false;\n  this.parent = false;\n  this.children = {};\n  this.offs = [];\n  this.save = false;\n  this.cascade = undefined;\n  this.state = null;\n}\n\naddMethods( SessionWatch.prototype,\n{\n\n  setRelations: function(relations)\n  {\n    if ( isObject( relations ) )\n    {\n      if ( this.relations && !equals( this.relations, relations ) )\n      {\n        throw 'Changing already watched relations is not allowed.';\n      }\n\n      this.relations = relations;\n    }\n  },\n\n  setSession: function(session)\n  {\n    var object = this.object;\n    var objectSession = object.$session;\n\n    if ( objectSession && objectSession !== session && !objectSession.isDestroyed() )\n    {\n      throw 'An object can only be watched by one live session at a time.';\n    }\n\n    object.$session = session;\n  },\n\n  setParent: function(parent)\n  {\n    this.parent = parent;\n\n    if ( parent )\n    {\n      parent.children[ this.key ] = this;\n    }\n  },\n\n  addListener: function(eventName, listener)\n  {\n    var object = this.object;\n    var off = noop;\n\n    if ( object.$on )\n    {\n      off = object.$on( eventName, listener );\n    }\n    else if ( object.on )\n    {\n      off = object.on( eventName, listener );\n    }\n\n    this.offs.push( off );\n  },\n\n  addCascade: function(cascade)\n  {\n    if ( isNumber( cascade ) )\n    {\n      if ( this.cascade === undefined )\n      {\n        this.cascade = 0;\n      }\n\n      this.cascade = this.cascade | cascade;\n    }\n  },\n\n  resetSave: function()\n  {\n    this.save = false;\n    this.cascade = undefined;\n  },\n\n  saveState: function(override)\n  {\n    if ( this.state && !override )\n    {\n      return;\n    }\n\n    var model = this.object;\n    var oldState = model.$savedState;\n\n    model.$push();\n\n    var relations = this.relations;\n    var state = model.$savedState;\n\n    if ( isObject( relations ) )\n    {\n      for (var relationName in relations)\n      {\n        var value = model[ relationName ];\n\n        if ( value instanceof Model )\n        {\n          state[ relationName ] = value.$key();\n        }\n        else if ( value instanceof ModelCollection )\n        {\n          state[ relationName ] = value.pluck( keyParser );\n        }\n        else\n        {\n          state[ relationName ] = null;\n        }\n      }\n    }\n\n    this.state = state;\n\n    model.$savedState = oldState;\n  },\n\n  restoreState: function()\n  {\n    var model = this.object;\n    var state = this.state;\n\n    if ( isObject( state ) )\n    {\n      var relations = model.$db.relations;\n      var relationsWatched = this.relations;\n      var relationsSnapshot = {};\n\n      for (var relationName in relationsWatched)\n      {\n        var relation = relations[ relationName ];\n\n        relationsSnapshot[ relationName ] = {\n          clearKey: relation.clearKey,\n          cascadeRemove: relation.cascadeRemove,\n          cascade: relation.cascade\n        };\n\n        relation.clearKey = false;\n        relation.cascadeRemove = Cascade.None;\n        relation.cascade = Cascade.None;\n      }\n\n      model.$set( state, undefined, true, true );\n      model.$decode();\n\n      for (var relationName in relationsWatched)\n      {\n        var relation = relations[ relationName ];\n        var snapshot = relationsSnapshot[ relationName ];\n\n        relation.clearKey = snapshot.clearKey;\n        relation.cascadeRemove = snapshot.cascadeRemove;\n        relation.cascade = snapshot.cascade;\n      }\n    }\n  },\n\n  removeListeners: function()\n  {\n    var offs = this.offs;\n\n    for (var i = 0; i < offs.length; i++)\n    {\n      offs[ i ]();\n    }\n\n    offs.length = 0;\n  },\n\n  moveTo: function(target)\n  {\n    var session = this.object.$session;\n\n    this.removeListeners();\n    this.moveChildren( target );\n\n    if ( this.parent )\n    {\n      delete this.parent.children[ this.key ];\n    }\n\n    session.watching.remove( this.key );\n    session.unwatched.remove( this.key );\n    session.removing.remove( this.key );\n\n    target.put( this.key, this );\n  },\n\n  reattach: function()\n  {\n    var session = this.object.$session;\n\n    session.removing.remove( this.key );\n    session.unwatched.remove( this.key );\n    session.watching.put( this.key, this );\n\n    session.watch( this.object, this.relations, this.parent );\n  },\n\n  destroy: function()\n  {\n    var children = this.children;\n\n    this.children = {};\n    this.removeListeners();\n    this.destroyReferences();\n\n    for (var childKey in children)\n    {\n      children[ childKey ].destroy();\n    }\n  },\n\n  destroyReferences: function()\n  {\n    var session = this.object.$session;\n\n    session.watching.remove( this.key );\n    session.removing.remove( this.key );\n    session.unwatched.remove( this.key );\n\n    this.object.$session = null;\n    this.state = null;\n\n    this.parent = null;\n    this.save = false;\n    this.cascade = undefined;\n  },\n\n  moveChildren: function(target)\n  {\n    var children = this.children;\n\n    for (var childKey in children)\n    {\n      children[ childKey ].moveTo( target );\n    }\n  }\n\n});\n\n\nfunction searchAny(map, defaultResult, callback, context)\n{\n  var watchers = map.values;\n\n  for (var i = watchers.length - 1; i >= 0; i--)\n  {\n    var watcher = watchers[ i ];\n    var result = callback.call( context, watcher.object, watcher );\n\n    if ( result !== undefined )\n    {\n      return result;\n    }\n  }\n\n  return defaultResult;\n}\n\nfunction searchModels(map, defaultResult, callback, context)\n{\n  var watchers = map.values;\n\n  for (var i = watchers.length - 1; i >= 0; i--)\n  {\n    var watcher = watchers[ i ];\n\n    if ( watcher.object instanceof Model )\n    {\n      var result = callback.call( context, watcher.object, watcher );\n\n      if ( result !== undefined )\n      {\n        return result;\n      }\n    }\n  }\n\n  return defaultResult;\n}\n\n\n  Rekord.Session = Session;\n  Rekord.SessionWatch = SessionWatch;\n\n})(this, this.Rekord);\n"],"sourceRoot":"/source/"}